// Mocks generated by Mockito 5.1.0 from annotations
// in drivers/test/transactions/transaction_manager_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:drivers/transactions/transaction.dart' as _i2;
import 'package:drivers/transactions/transaction_state_storage.dart' as _i4;
import 'package:drivers/transactions/transactions_manager.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTransaction_0 extends _i1.Fake implements _i2.Transaction {}

/// A class which mocks [Transaction].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransaction extends _i1.Mock implements _i2.Transaction {
  MockTransaction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i3.Future<void> backupState() =>
      (super.noSuchMethod(Invocation.method(#backupState, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> restoreStateFromBackup() =>
      (super.noSuchMethod(Invocation.method(#restoreStateFromBackup, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> clearBackupState() =>
      (super.noSuchMethod(Invocation.method(#clearBackupState, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> cancel() =>
      (super.noSuchMethod(Invocation.method(#cancel, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Stream<_i2.TransactionExecutionStatus> execute([Object? action]) =>
      (super.noSuchMethod(Invocation.method(#execute, [action]),
              returnValue: Stream<_i2.TransactionExecutionStatus>.empty())
          as _i3.Stream<_i2.TransactionExecutionStatus>);
  @override
  _i3.Future<void> failed() =>
      (super.noSuchMethod(Invocation.method(#failed, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}

/// A class which mocks [TransactionStateStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionStateStorage extends _i1.Mock
    implements _i4.TransactionStateStorage {
  MockTransactionStateStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.TransactionState>> loadState() => (super.noSuchMethod(
      Invocation.method(#loadState, []),
      returnValue: Future<List<_i4.TransactionState>>.value(
          <_i4.TransactionState>[])) as _i3.Future<List<_i4.TransactionState>>);
  @override
  _i3.Future<void> updateStatus(String? id, _i5.TransactionStatus? status) =>
      (super.noSuchMethod(Invocation.method(#updateStatus, [id, status]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> delete(String? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}

/// A class which mocks [TransactionFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionFactory extends _i1.Mock
    implements _i5.TransactionFactory {
  MockTransactionFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Transaction> createTransactionById(String? id) =>
      (super.noSuchMethod(Invocation.method(#createTransactionById, [id]),
              returnValue: Future<_i2.Transaction>.value(_FakeTransaction_0()))
          as _i3.Future<_i2.Transaction>);
}
